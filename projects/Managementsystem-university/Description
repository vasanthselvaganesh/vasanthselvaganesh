
Description
1.
Imports and Namespace
The program begins by including necessary libraries:
<iostream> for input and output to the console.
<fstream> for file handling operations.
<unistd.h> for the usleep() function, which is used for pausing the program.
2.
Class Definition: University
The University class encapsulates student data, containing private member variables for:
RollNo: The student's roll number.
Name: The student's name.
Stream: The field of study of the student.
Address: The residential address of the student.
The class features:
A default constructor to initialize member variables.
Setter methods for each member variable (setRollNo, setName, setStream, and setAddress).
Getter methods for returning the values of member variables (getRollNo, getName, getStream, and getAddress).
3.
Function Implementations

Add Function (void add(University student)):

Prompts the user to input student details.
Stores this information in a structured format and appends it to the university.txt file.
Notifies the user upon successfully adding student data.

Search Function (void search()):

Allows users to search for a student by their RollNo.
Reads the contents of university.txt and displays related information if a match is found.
Informs the user if the student is not found.

Update Function (void update(University student)):

Prompts the user to enter a studentâ€™s RollNo to locate their record.
Updates the address of the student after locating their record in university.txt.
Uses a temporary file to handle updates, ensuring data integrity.
4.
Main Function (int main()):
Initiates a user interface by repeatedly displaying a menu with options to:
Add a student.
Search for a student.
Update student data.
Exit the program.
Implements a loop to handle user choices and utilizes system("clear") to refresh the console output.
Incorporates usleep() to pause for a user-defined period after each operation, improving user experience.
User Interface

The console interface is straightforward, guiding users with prompts to enter data or make selections. A simple text-based menu allows users to easily choose their desired action, while the clear screen feature enhances readability.

Summary

Overall, the University Management System provides a practical way to manage student information using basic file handling and class structure in C++. Its functionalities cover essential tasks related to student data management, making it a foundational tool for those learning programming and appreciating user interactions with file systems.

The program is designed to run on macOS and uses standard C++ libraries. It replaces Windows-specific functions with macOS-compatible alternatives, making it portable and easy to use on different systems.
